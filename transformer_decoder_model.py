# -*- coding: utf-8 -*-
"""transformer_decoder_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e2TAmomSQT61IGKEvw07847X07nS496N
"""

import torch
import torch.nn as nn
import torch.nn.functional as F

# Configuration
class Config:
    vocab_size = 10000        # from BPE tokenizer
    block_size = 256          # max sequence length
    embedding_size = 512
    num_heads = 8
    head_size = embedding_size // num_heads  # 64
    num_layers = 6
    ffn_hidden_size = 2048
    dropout = 0.1

# Self-Attention Head
class SelfAttentionHead(nn.Module):
    def __init__(self, embedding_size, head_size, block_size):
        super().__init__()
        self.key = nn.Linear(embedding_size, head_size, bias=False)
        self.query = nn.Linear(embedding_size, head_size, bias=False)
        self.value = nn.Linear(embedding_size, head_size, bias=False)
        self.register_buffer("tril", torch.tril(torch.ones(block_size, block_size)))
        self.dropout = nn.Dropout(Config.dropout)

    def forward(self, x):
        B, T, C = x.shape
        k = self.key(x)     # (B, T, head_size)
        q = self.query(x)   # (B, T, head_size)
        wei = q @ k.transpose(-2, -1) / (C ** 0.5)  # (B, T, T)
        wei = wei.masked_fill(self.tril[:T, :T] == 0, float('-inf'))
        wei = F.softmax(wei, dim=-1)
        wei = self.dropout(wei)
        v = self.value(x)
        out = wei @ v  # (B, T, head_size)
        return out

# Multi-Head Attention
class MultiHeadAttention(nn.Module):
    def __init__(self, num_heads, embedding_size, head_size, block_size):
        super().__init__()
        self.heads = nn.ModuleList([
            SelfAttentionHead(embedding_size, head_size, block_size)
            for _ in range(num_heads)
        ])
        self.proj = nn.Linear(num_heads * head_size, embedding_size)
        self.dropout = nn.Dropout(Config.dropout)

    def forward(self, x):
        out = torch.cat([h(x) for h in self.heads], dim=-1)
        out = self.dropout(self.proj(out))
        return out

# Feedforward Network
class FeedForward(nn.Module):
    def __init__(self, embedding_size, hidden_size):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(embedding_size, hidden_size),
            nn.ReLU(),
            nn.Linear(hidden_size, embedding_size),
            nn.Dropout(Config.dropout)
        )

    def forward(self, x):
        return self.net(x)

# Transformer Block
class TransformerBlock(nn.Module):
    def __init__(self, config):
        super().__init__()
        self.ln1 = nn.LayerNorm(config.embedding_size)
        self.ln2 = nn.LayerNorm(config.embedding_size)
        self.attn = MultiHeadAttention(config.num_heads, config.embedding_size, config.head_size, config.block_size)
        self.ffn = FeedForward(config.embedding_size, config.ffn_hidden_size)

    def forward(self, x):
        x = x + self.attn(self.ln1(x))  # residual + norm
        x = x + self.ffn(self.ln2(x))   # residual + norm
        return x

# Full Transformer Decoder
class TransformerDecoderModel(nn.Module):
    def __init__(self, config):
        super().__init__()
        self.token_embedding_table = nn.Embedding(config.vocab_size, config.embedding_size)
        self.position_embedding_table = nn.Embedding(config.block_size, config.embedding_size)
        self.blocks = nn.Sequential(*[TransformerBlock(config) for _ in range(config.num_layers)])
        self.ln_f = nn.LayerNorm(config.embedding_size)  # final normalization
        self.lm_head = nn.Linear(config.embedding_size, config.vocab_size)

    def forward(self, idx, targets=None):
        B, T = idx.shape
        tok_emb = self.token_embedding_table(idx)
        pos = torch.arange(0, T, device=idx.device)
        pos_emb = self.position_embedding_table(pos)
        x = tok_emb + pos_emb
        x = self.blocks(x)
        x = self.ln_f(x)
        logits = self.lm_head(x)

        if targets is None:
            return logits
        else:
            B, T, C = logits.shape
            logits = logits.view(B * T, C)
            targets = targets.view(B * T)
            loss = F.cross_entropy(logits, targets)
            return logits, loss

# Instantiate model
config = Config()
model = TransformerDecoderModel(config)

print(f"Model initialized with {sum(p.numel() for p in model.parameters()) / 1e6:.2f}M parameters")